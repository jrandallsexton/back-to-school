using BackToSchool.CSharp.Misc;

using System;

using Xunit;

namespace BackToSchool.CSharp.Tests.Misc
{
    /// <summary>
    /// This test class can be considered as a playground,
    /// so feel free to modify it as needed. E.g.:
    /// - Add your own custom tests
    /// - Delete existing tests
    /// - modify test content or expected output
    ///
    /// The results of tests from this file will always be at the beginning
    /// of the report generated by clicking the "Run" button.
    ///
    /// The results of these tests do not affect your final score
    /// (unless the project fails to build).
    /// </summary>
    [Collection("BasicTests")]
    [TestCaseOrderer(
      "Container.Tests.Orderers.AlphabeticalOrderer",
      "Container.Tests"
    )]
    public class BasicTests
    {
        private readonly IContainer _container;
        public BasicTests()
        {
            _container = new Container();
        }

        /// <summary>
        /// Add 1, 2, 5, 4 -> [1, 2, 4, 5]
        /// Median of [1, 2, 4, 5] is 2
        /// Delete 1 -> [2, 4, 5]
        /// Median of [2, 4, 5] is 4
        /// </summary>
        [Fact(DisplayName = "Test basic 1")]
        public void TestBasic1()
        {
            Utility.CheckTimeout(() => {
                _container.Add(1);
                _container.Add(2);
                _container.Add(5);
                _container.Add(4);
                Assert.Equal(2, _container.GetMedian());
                Assert.True(_container.Delete(1));
                Assert.Equal(4, _container.GetMedian());
            }, 100);
        }

        /// <summary>
        /// Add 5, 3, 5 -> [3, 5, 5]
        /// Median of [3, 5, 5] is 5
        /// Delete 5, 5, 5 -> [3]
        /// Median of [3] is 3
        /// Delete [2, 3] -> []
        /// Median of [] does not exist
        /// Add 1, 1, 2, 2, 2 -> [1, 1, 2, 2, 2]
        /// Median of [1, 1, 2, 2, 2] is 2
        /// Delete 2 -> [1, 1, 2, 2]
        /// Median of [1, 1, 2, 2] is 1
        /// Delete 1 -> [1, 2, 2]
        /// Median of [1, 2, 2] is 2
        /// </summary>
        [Fact(DisplayName = "Test basic 2")]
        public void TestBasic2()
        {
            Utility.CheckTimeout(() => {
                _container.Add(5);
                _container.Add(3);
                _container.Add(5);
                Assert.Equal(5, _container.GetMedian());
                Assert.True(_container.Delete(5));
                Assert.True(_container.Delete(5));
                Assert.False(_container.Delete(5));
                Assert.Equal(3, _container.GetMedian());
                Assert.False(_container.Delete(2));
                Assert.True(_container.Delete(3));
                Assert.ThrowsAny<Exception>(() => _container.GetMedian());
                _container.Add(1);
                _container.Add(1);
                _container.Add(2);
                _container.Add(2);
                _container.Add(2);
                Assert.Equal(2, _container.GetMedian());
                Assert.True(_container.Delete(2));
                Assert.Equal(1, _container.GetMedian());
                Assert.True(_container.Delete(1));
                Assert.Equal(2, _container.GetMedian());
            }, 100);
        }

        /// <summary>
        /// Delete 4 -> []
        /// Median of [] does not exist
        /// Add 10, 9, 8, ..., 1 -> [1, 2, 3, ..., 10]
        /// Median of [1, 2, ..., 10] is 5
        /// Delete 4, 5, 6 -> [1, 2, 3, 7, 8, 9, 10]
        /// Median of [1, 2, 3, 7, 8, 9, 10] is 7
        /// </summary>
        [Fact(DisplayName = "Test basic 3")]
        public void TestBasic3()
        {
            Utility.CheckTimeout(() => {
                Assert.False(_container.Delete(4));
                Assert.ThrowsAny<Exception>(() => _container.GetMedian());
                for (var i = 10; i >= 1; --i)
                {
                    _container.Add(i);
                }
                Assert.Equal(5, _container.GetMedian());
                for (var i = 4; i <= 6; ++i)
                {
                    Assert.True(_container.Delete(i));
                }
                Assert.Equal(7, _container.GetMedian());
            }, 100);
        }
    }
}
